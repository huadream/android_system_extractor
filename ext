#!/bin/bash
#
#    System Extractor Linux
#    Copyright (C) 2016-2017 matrixex
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


#  ////////FUNCTIONS/////////
EXT_CHECK() {
if [ ! -e tools ]
  then
    clear
	echo
    echo "     Folder 'tools' not found , the extractor won't  "
    echo "     work , unless you place it in right place       "
	exit 0
  fi

if [ ! -e ext ]
  then
    clear
	echo
    echo "     Don't modify or reaname script ext , it is associated  "
    echo "     with all functions/folders , so just do ./ext don't REN"
	exit 0
fi

#Check for python - installed OR NOT
#PYTHON IS REQUIRED FOR DAT, SO ITS A MAJOR ISSUE IF NOT PYTHON
CHK=`python --version 2>/dev/null`
  if [ $? == 127 ]
   then
     clear
     echo
     echo
     cecho R "      Programe " "Python" " is not installed , please install python"
	 echo
     echo "      otherwise extractor will not work properly                 "
	 echo
	 echo "      TRY : apt-get install python or your friend GOOGLE"
	 echo
     echo
     exit 1
  fi

#JAVA , EXT. WILL WORK BUT ZIP SIGN WON'T --MINOR ISSUE
CHK=`java -version 2>/dev/null`
  if [ $? == 127 ]
   then
     clear
     echo
     echo
     echo "      JAVA SDK is not installed , please install JAVA"
	 echo
     echo "      DEVELOPMENT KIT , it is required to SIGN FILES "
	 echo
     read -p "      Ignore and continue (y/n) : " OPTN
       if [ $OPTN == y ]
         then
	     L_JAVA=0
		 EXT_MAIN
	    else
         exit 1
       fi
  fi



}

#COLOR
#USAGE: cecho TYPE=R|G|Y|B|P|C|W "msg1" "color_msg2" "msg3"
cecho ()
   {
   #Case didn't work out for me in cygwin
   if [ "$1" == "R" ]
then
  echo -e "$2""\033[0;91m$3\033[0m""$4" # Red
elif  [ "$1" == "G" ]
then
  echo -e "$2""\033[0;92m$3\033[0m""$4" # Green
elif  [ "$1" == "Y" ]
then
  echo -e "$2""\033[0;93m$3\033[0m""$4" # Yellow
elif  [ "$1" == "B" ]
then
  echo -e "$2""\033[0;94m$3\033[0m""$4" # Blue
elif  [ "$1" == "P" ]
then
  echo -e "$2""\033[0;95m$3\033[0m""$4" # Purple
elif  [ "$1" == "C" ]
then
  echo -e "$2""\033[0;96m$3\033[0m""$4" # Cyan
elif  [ "$1" == "W" ]
then
  echo -e "$2""\033[0;97m$3\033[0m""$4" # White
 fi
}

#PAUSE -like batch
WAIT() {
  echo
  read -p "$1Press enter key to continue . . ."
  echo
}

#Extract DAT
E_DAT() {

   unset DATE_STR
   DATE_STR=`date '+%m-%d-%a_%H-%M-%S'`
   #For not conflicting with previous extracted files
   #Based on dxdia's kitchen
   extract=extract_$DATE_STR
   mkdir $extract
   clear
   echo
   echo   "::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   echo   "::                                                  ::"
   echo -e  "::  Copy " "\033[0;92msystem.new.dat\033[0m"" , ""\033[0;92msystem.transfer.list\033[0m""     ::"
   echo   "::                                                  ::"
   echo -e  "::" " to ""\033[0;97m$extract\033[0m"" folder.           ::"
   echo   "::                                                  ::"
   echo   "::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   echo
   WAIT ""

   clear
    if [ ! -f $extract/system.new.dat ]
	  then
	  echo
      cecho R " File" " system.new.dat " "does not exist!  "
      echo
	  cecho P   " in " "$extract " "folder , try again by  "
	  echo
	  echo    " placing system.new.dat in mentioned folder "
	  rm -rf $extract
	  WAIT " "
	  EXT_MAIN
     fi
	 if [ ! -f $extract/system.transfer.list ]
	  then
	  echo
      cecho R " File" " system.transfer.list " "does not exist!"
      echo
      cecho P   " in " "$extract " "folder , try again by  "
	  echo
	  echo    " placing system.transfer.list in mentioned folder "
	  rm -rf $extract
	  WAIT " "
	  EXT_MAIN
     fi

	 #Script tesded on Ubuntu
	 #Modified on 10/16/2016
	cd $extract

    echo
	echo  " Found system.new.dat & system.transfer.list"
	echo
	sleep 0.5
	echo  " converting system.new.dat to system.img    "
    cp ../tools/UNI/sdat2img.py .
	python sdat2img.py system.transfer.list system.new.dat system.img
	echo
	    if [ -f system.img ]    #IF-2
	      then
          rm -f system.new.dat
	      rm -f system.transfer.list
          rm -f sdat2img.py
	      echo "  Successfully Converted into System.img"
          sleep 1

            if [ `uname | grep Linux` ]  #IF-1
              then
              echo
              cecho W "" "  Mounting system.img to output folder"
	          echo
	          read -p "  Hit Enter to continue to mount"
	          echo
                 if [ ! -e output ]
                   then
                   mkdir output
                 fi
                 #IN Ubuntu mount worked but in other OS
                 #IDK it will or will not work
	             sudo mount -t ext4 -o loop system.img output/
	             if [ $? == 0 ]
                    then
                    echo
	                echo  "   DONE! Mounted system.img in output folder"
	                echo
					cd ..
	                read -p "   ALL DONE HIT ENTER TO CONTINUE TO MENU"
					EXT_MAIN
		          else
                    echo
                    echo   "    Mount Failed Please try another method!"
                    echo
					cd ..
					WAIT "    "
					EXT_MAIN
                 fi
	        elif [ `uname | grep CYGWIN` ]
                then
                cp ../tools/Cygwin/ImgExtractor.exe .
	 	        echo
		        cecho W "" "  Converting system.img to system_ folder"
		        sleep 2
                ./ImgExtractor.exe system.img -i
				if [ -e system_ ]
				  then
				  rm -f ImgExtractor.exe
				  echo
				  echo  "   Extracted system.img to system_ folder"
				  echo
                  read -p "   ALL DONE HIT ENTER TO CONTINUE TO MENU"
				  echo
				  echo
				  cd ..
				  EXT_MAIN
                fi
            fi #FI-1
	   fi  #FI-2

}

#Unmount output - mounted while extracting DAT
UN_MNT() {
    clear
	echo
	echo  "  This section is for Unmounting output folder  "
	echo
	echo  "  which is mounted during extraction of DAT"
	echo
	read -p "  Hit enter to continue"
   if [ -e "$extract/output" ]
    then
     clear
     cd $extract
     echo "  Trying to Unmount system.img IF MOUNTED in output folder"
     echo
     read -p "  Hit enter to try "
     echo
     #ROOT IS REQUIRED
	 sudo umount output/
     echo
     echo  "    DONE    "
     echo
     read enter
     cd ..
     EXT_MAIN
   fi
 }

#Repack DAT to system
R_DAT() {

echo "UNDER CONST."
clear
unset DATE_STR
   DATE_STR=`date '+%m-%d-%a_%H-%M-%S'`
   #For not conflicting with previous extracted files
   #Based on dxdia's kitchen
   ROM=ROM_$DATE_STR
   mkdir $ROM
   echo
    echo
   cecho G "   Creating folder" " `pwd`/$ROM"
   echo
   cecho C "   Place your" " system " "folder into the $ROM " "folder"
   echo
   WAIT "   "
   cd $ROM
   if [ -e system/app ]
    then
	echo
	read -p "  Enter size in MB :" M_BYTE
	#1MB == 1048576
	SIZE="$(($M_BYTE*1048576))"
	echo $SIZE bytes
	./make_ext4fs -T 0 -S file_contexts -l $SIZE -a system system_new.img output/


   fi



FILENAME=`find *.* 2>/dev/null`
SIZE=$(du -sb $FILENAME | awk '{print $1}')

}

#IMAGE MENU MOUNT, UNMOUNT etc
IMG() {

echo "UNDER CONST."
}

#ROM - ZIP SIGN
SIGN_ZIP() {
  if [ "$L_JAVA" == "0" ]
    then
	 clear
	 echo
	 echo
	 echo  "    JAVA IS NOT INSTALLED , So zip signing will   "
	 echo
	 echo  "    not work unless you install JAVA SE DEVLOPMENT"
     echo
	 echo  "    -KIT 7 or higher, on your current OS/platform "
	 echo
	 read -p ""
     EXT_MAIN
   fi

  #Script Starts here
   clear
   echo
   unset DATE_STR
   DATE_STR=`date '+%m-%d-%a_%H-%M-%S'`
   sign_files=sign_$DATE_STR
   #This sign_-->"date"<-- is for not conflicting with previously
   #created folder
   mkdir $sign_files
   echo
   echo "   This section is only for ZIP sign of ROM or any other"
   echo
   echo "   ZIP which contain META-INF folder NOT for apk signing"
   echo
   echo "   Also one zip at a time, don't place multiple zips    "
   echo
   cecho W "" "            ZIP FILE MUST NOT CONTAIN SPACE"
   sleep 1
   echo
   cecho G "   Creating folder" " `pwd`/$sign_files"
   echo
   cecho C "   Copy your ZIP file into the" " $sign_files " "folder"
   WAIT

   cd $sign_files
   ZIP_N=`find *.zip 2>/dev/null`
   if [ $? == 0 ]
     then
	   clear
	   cp ../tools/UNI/SIGN_TOOLS/testkey.* .
	   cp ../tools/UNI/SIGN_TOOLS/signapk.jar .
	   echo
	   echo
	   echo  "    Signing $ZIP_N .... "
	   ZIP_F="signed_$ZIP_N"
       java -jar signapk.jar testkey.x509.pem testkey.pk8 $ZIP_N $ZIP_F
        if [ $? == 0 ]
          then
	      rm -f testkey.*
          rm -f signapk.jar
          rm -f $ZIP_N
		  echo
          echo
          echo "    SIGNED $ZIP_F "
          echo
		  cecho G "" "    Found in `pwd`/$sign_files" " folder"
          cd ..
          WAIT
          EXT_MAIN
        else
		  clear
		  echo
	      cecho R "" "        Signing failed          "
	      echo
          echo "   Possible reasons :"
		  echo
		  echo "   1) Java not installed properly , PATH to java"
		  echo "      is not set, try typing java in terminal   "
		  echo
		  echo "   2) Zip file does not contain META-INF folder "
		  echo
		  echo "   3) Corrupted ZIP file                        "
	      echo
		  echo "   That's all , try again"
		  cd ..
          rm -rf $sign_files
          WAIT
          EXT_MAIN
        fi
    elif [ $? == 1 ]
	 then
	   clear
	   echo
	   echo
	   cecho R "      NO " "ZIP" " FILE FOUND"
	   rm -rf $sign_files
	   WAIT
	   EXT_MAIN
	else
	   clear
	   echo
	   cecho R "" "              UNKNOWN REASON "
	   echo
	   echo       "   Either copy your zip file to sign_folder "
	   echo
	   echo       "   or Use a different zip file              "
	   WAIT
	   EXT_MAIN
   fi
}

#START - HOME
EXT_START() {
  clear
  echo
  echo
  cecho W "" "                     Support android 5.x ~ 7.x           "
  cecho W "" "                     System extractor & repack           "
  cecho G "                           (" "Mod by dinphy" ")"
  cecho C "" "                                                     $DATE_STR"
  echo
  cecho W "" "    Menu"
  echo
  cecho C "    1 - " "Unpack" " system.new.dat"
  echo
  cecho C "    2 - " "Repack" " system.new.dat"
  echo
  cecho C "    3 - " "Unpack" " system.img"
  echo
  cecho C "    4 - " "Sign" " ZIP files"
   echo
  cecho C "    u - " "Unmount" " output"
  echo
  cecho C "    x - " "Exit"
  echo
  echo
}

E_SYS() {

   unset DATE_STR
   DATE_STR=`date '+%m-%d-%a_%H-%M-%S'`
   #For not conflicting with previous extracted files
   #Based on dxdia's kitchen
   extract=extract_$DATE_STR
   mkdir $extract
   clear
   echo
   echo   "::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   echo   "::                                                  ::"
   echo -e  "::  Copy " "\033[0;92msystem.img\033[0m""                                ::"
   echo   "::                                                  ::"
   echo -e  "::" " to ""\033[0;97m$extract\033[0m"" folder.           ::"
   echo   "::                                                  ::"
   echo   "::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   echo
   WAIT ""

   clear
    if [ ! -f $extract/system.img ]
	  then
	  echo
      cecho R " File" " system.img " "does not exist!  "
      echo
	  cecho P   " in " "$extract " "folder , try again by  "
	  echo
	  echo    " placing system.img in mentioned folder "
	  rm -rf $extract
	  WAIT " "
	  EXT_MAIN
     fi
     cd $extract

       echo
     echo  " Found system.img"
     echo
     sleep 0.5
     echo  " converting system.img to system.raw.img    "
     if [ `uname | grep Linux` ]  #IF-1
       then
       cp ../tools/UNI/simg2img .
     ./simg2img system.img system.raw.img
     elif [ `uname | grep CYGWIN` ]
         then
         cp ../tools/Cygwin/simg2img.exe .
         ./simg2img.exe system.img system.raw.img
     fi
     echo
         if [ -f system.raw.img ]    #IF-2
           then
             rm -f system.img
             rm -f simg2img simg2img.exe
           echo "  Successfully Converted into System.raw.img"
             sleep 1

               if [ `uname | grep Linux` ]  #IF-1
                 then
                 echo
                 cecho W "" "  Mounting system.raw.img to output folder"
               echo
               read -p "  Hit Enter to continue to mount"
               echo
                    if [ ! -e output ]
                      then
                      mkdir output
                    fi
                    #IN Ubuntu mount worked but in other OS
                    #IDK it will or will not work
                  sudo mount -t ext4 -o loop system.raw.img output/
                  if [ $? == 0 ]
                       then
                       echo
                     echo  "   DONE! Mounted system.raw.img in output folder"
                     echo
             cd ..
                     read -p "   ALL DONE HIT ENTER TO CONTINUE TO MENU"
             EXT_MAIN
                 else
                       echo
                       echo   "    Mount Failed Please try another method!"
                       echo
             cd ..
             WAIT "    "
             EXT_MAIN
                    fi
             elif [ `uname | grep CYGWIN` ]
                   then
                   cp ../tools/Cygwin/ImgExtractor.exe .
               echo
               cecho W "" "  Converting system.raw.img to system_ folder"
               sleep 2
                   ./ImgExtractor.exe system.raw.img -i
           if [ -e system_ ]
             then
             rm -f ImgExtractor.exe
             echo
             echo  "   Extracted system.raw.img to system_ folder"
             echo
                     read -p "   ALL DONE HIT ENTER TO CONTINUE TO MENU"
             echo
             echo
             cd ..
             EXT_MAIN
                   fi
               fi 
        fi  

     }


#MENU
EXT_MAIN() {
while :
do

  clear
  unset DATE_STR
  DATE_STR=`date '+%m-%d-%y'`
  EXT_START
  read -p "Enter option: " CHOICE
  case "$CHOICE" in
		1) E_DAT ;;      #DONE
		2)  clear ; echo NOT YET DONE ; exit ;;
		3) E_SYS ;;
		4) SIGN_ZIP ;;   #DONE
		u|U) UN_MNT ;;   #DONE
		X|x) clear; echo; echo "Thanks for using."; echo; exit 1;;
		*) cecho R "" "     Invalid option"; sleep 0.3; continue;;
	esac

done
}

#DEPLOYING function
EXT_CHECK
EXT_MAIN
